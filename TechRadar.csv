name,ring,quadrant,isNew,description
Simplest possible feature toggle,Adopt,Techniques,TRUE,"<p>Unfortunately, <a href=""https://martinfowler.com/articles/feature-toggles.html"">feature toggles</a> are less common than we'd like, and quite often we see people mixing up its types and use cases. It's quite common to come across teams that use heavyweight platforms such as <a href=""https://launchdarkly.com/"">LaunchDarkly</a> to implement feature toggles, including release toggles, to benefit from <a href=""https://martinfowler.com/articles/continuousIntegration.html"">Continuous Integration</a>, when all you need are if/else conditionals. Therefore, unless you need A/B testing or <a href=""https://martinfowler.com/bliki/CanaryRelease.html"">canary release</a> or hand over feature release responsibility to business folks, we encourage you to use the <strong>simplest possible feature toggle</strong> instead of unnecessarily complex feature toggle frameworks.</p>"
Continuous delivery for machine learning (CD4ML),Trial,Techniques,FALSE,"<p>Applying machine learning to make the business applications and services intelligent is more than just training models and serving them. It requires implementing end-to-end and continuously repeatable cycles of training, testing, deploying, monitoring and operating the models. <strong><a href=""https://martinfowler.com/articles/cd4ml.html"">Continuous delivery for machine learning (CD4ML)</a></strong> is a technique that enables reliable end-to-end cycles of development, deploying and monitoring machine learning models. The underpinning technology stack to enable CD4ML includes tooling for accessing and discovering data, version control of artefacts (such as data, model and code), continuous delivery pipelines, automated environment provisioning for various deployments and experiments, model performance assessment and tracking, and model operational observability. Companies can choose their own tool set depending on their existing tech stack. CD4ML emphasizes automation and removing manual handoffs. CD4ML is our de facto approach for developing ML models.</p>"
Apache Pulsar,Assess,Platforms,TRUE,"<p><strong><a href=""https://pulsar.apache.org/en/"">Apache Pulsar</a></strong> is an open source pub-sub messaging/streaming platform, competing in a similar space with <a href=""/radar/tools/apache-kafka"">Apache Kafka</a>. It provides expected functionality — such as low-latency async and sync message delivery and scalable persistent storage of messages — as well as various client libraries. What has excited us to evaluate Pulsar is its ease of scalability, particularly in large organizations with multiple segments of users. Pulsar natively supports multitenancy, georeplication, role-based access control and segregation of billing. We're also looking to Pulsar to solve the problem of a never-ending log of messages for our large-scale data systems where events are expected to persist indefinitely and subscribers are able to start consuming messages retrospectively. This is supported through a <a href=""https://pulsar.apache.org/docs/en/concepts-tiered-storage/"">tiered storage</a> model. Although Pulsar is a promising platform for large organizations, there is room for improvement. Its current installation requires administering <a href=""https://pulsar.apache.org/docs/en/administration-zk-bk/"">ZooKeeper and BookKeeper</a> among other pieces of technology. We hope that with its growing adoption, users can soon count on wider community support.</p>"
Node overload,Hold,Platforms,TRUE,"<p>Technologies, especially wildly popular ones, have a tendency to be overused. What we're seeing at the moment is <strong>Node overload</strong>, a tendency to use Node.js indiscriminately or for the wrong reasons. Among these, two stand out in our opinion. Firstly, we frequently hear that Node should be used so that all programming can be done in one programming language. Our view remains that <a href=""/radar/techniques/polyglot-programming"">polyglot programming</a> is a better approach, and this still goes <a href=""/radar/languages-and-frameworks/javascript-as-a-first-class-language"">both ways</a>. Secondly, we often hear teams cite performance as a reason to choose Node.js. Although there are myriads of more or less sensible benchmarks, this perception is rooted in history. When Node.js became popular, it was the first major framework to embrace a nonblocking programming model which made it very efficient for IO-heavy tasks. (We mentioned this in our write-up of Node.js in 2012.) Due to its single-threaded nature, Node.js was never a good choice for compute-heavy workloads, though, and now that capable nonblocking frameworks also exist on other platforms — some with elegant, modern APIs — performance is no longer a reason to choose Node.js.</p>"
Cypress,Adopt,Tools,FALSE,"<p><strong><a href=""http://www.cypress.io/"">Cypress</a></strong> is still a favorite among our teams where developers manage end-to-end tests themselves, as part of a healthy <a href=""https://martinfowler.com/articles/practical-test-pyramid.html#End-to-endTests"">test pyramid</a>, of course. We decided to call it out again in this Radar because recent versions of Cypress have added <a href=""https://cypress.io/blog/2020/02/06/introducing-firefox-and-edge-support-in-cypress-4-0/"">support for Firefox</a>, and we strongly suggest testing on multiple browsers. The dominance of Chrome and Chromium-based browsers has led to a worrying trend of teams seemingly only testing with Chrome which can lead to <a href=""https://twitter.com/mike_conley/status/1245797292453609478"">nasty surprises</a>.</p>"
ConfigCat,Assess,Tools,TRUE,"<p>If you're looking for a service to support dynamic feature toggles (and bear in mind that simple feature toggles work well too), check out <strong><a href=""https://configcat.com/"">ConfigCat</a></strong>. We'd describe it as ""like LaunchDarkly but cheaper and a bit less fancy"" and find that it does most of what we need. ConfigCat supports simple feature toggles, user segmentation, and A/B testing and has a generous free tier for low-volume use cases or those just starting out.</p>"
React Hooks,Adopt,languages-and-frameworks,FALSE,"<p><strong><a href=""https://reactjs.org/docs/hooks-intro.html"">React Hooks</a></strong> have introduced a new approach to managing stateful logic; given React components have always been closer to functions than classes, Hooks have embraced this and brought state to the functions, instead of taking function as methods to the state with classes. Based on our experience, Hooks improve reuse of functionality among components and code readability. Given Hooks’ testability improvements, using <a href=""https://reactjs.org/docs/test-renderer.html"">React Test Renderer</a> and <a href=""/radar/languages-and-frameworks/react-testing-library"">React Testing Library</a>, and their growing community support, we consider them our approach of choice.</p>"
SwiftUI,Trial,languages-and-frameworks,FALSE,"<p>Apple has taken a big step forward with their new <strong><a href=""https://developer.apple.com/xcode/swiftui/"">SwiftUI</a></strong> framework for implementing user interfaces on the macOS and iOS platforms. We like that SwiftUI moves beyond the somewhat kludgy relationship between Interface Builder and Xcode and adopts a coherent, declarative and code-centric approach. You can now view your code and the resulting visual interface side by side in Xcode 11, making for a much better developer experience. The SwiftUI framework also draws inspiration from the <a href=""/radar/languages-and-frameworks/react-js"">React.js</a> world that has dominated web development in recent years. Immutable values in view models and an asynchronous update mechanism make for a unified reactive programming model. This gives developers an entirely native alternative to similar reactive frameworks such as <a href=""/radar/languages-and-frameworks/react-native"">React Native</a> or <a href=""/radar/languages-and-frameworks/flutter"">Flutter</a>. SwiftUI definitely represents the future of Apple UI development, and although new, it has shown its benefits. We've been having great experience with it — and its shallow learning curve. It's worth noting that you should know your customer's use case before jumping into using SwiftUI, given that it doesn't support iOS 12 or below.</p>"
Karate,Trial,Tools,TRUE,"<p>Karate is a testing tool specifically for testing API's. Within the Mule team we have started a PoC to see if this tool is a good match for what we need there. After first example test cases this seems to be the case. Currently we are trying to add this to our CI/CD and will expand the framework after that.</p>"
WebdriverIO,Adopt,Tools,FALSE,
UFT,Adopt,Tools,FALSE,
Leapwork,Assess,Tools,TRUE,"<p>Leapwork is used within Gall and AH for testing Oracle applications. A license is available. We have to decide if we want to use this tool at Etos</p>"
Selenium,Adopt,Tools,FALSE,"<p>A tool to use browser functionality in automated tests</p>"
Jenkins,Adopt,Tools,FALSE,"Tool where the CICD job pipelines are configured and deployment can be triggered from it"
OpenShift,Adopt,Platforms,FALSE,"Its a platform where jenkins is been configured"
Kubernetes,Adopt,Techniques,FALSE,"Tool used to build and implement Jenkins"
SonarQube,Adopt,Tools,FALSE,"Code quality checker"
Java,Adopt,languages-and-frameworks,FALSE,"<p>Used as programming language for automated tests for Oracle systems in combination with Selenium.<p>"
JavaScript,Adopt,languages-and-frameworks,FALSE,"<p>Used as programming language for automated tests for web shop.<p>"
Nexus Artifact Repository,Adopt,Tools,FALSE,"Artifact repository which has backup code and existing packages"
Github,Adopt,Tools,TRUE,"Code Repository migrated from bitbucket"
Bitbucket,Adopt,Tools,FALSE,"Code Repository"